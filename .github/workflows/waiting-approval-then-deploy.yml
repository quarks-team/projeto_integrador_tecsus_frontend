name: Deploy - Waiting Approval then Deploy

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}

on:
  workflow_run:
    workflows: ["CI Pipeline - Build and Test"]
    types:
      - completed

jobs:
  wait-for-status-check:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      approved: ${{ steps.set_approval.outputs.approved }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check Deployment Approval
        id: set_approval
        run: |
          if [ -f .github/workflows/deploy_approval.txt ]; then
            approval=$(cat .github/workflows/deploy_approval.txt)
            echo "approval=$approval" >> $GITHUB_ENV
            echo "Approval status read from file: $approval"
            echo "approved=$approval" >> $GITHUB_OUTPUT
          else
            echo "approval=no" >> $GITHUB_ENV
            echo "Approval file not found. Defaulting to no."
            echo "approved=no" >> $GITHUB_OUTPUT

  deploy-on-github-pages:
    runs-on: ubuntu-latest
    needs: wait-for-status-check
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify Approval and Status Check
        uses: actions/github-script@v6
        id: verify_approval_and_status
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          script: |
            const fs = require('fs');
            const path = '.github/workflows/deploy_approval.txt';

            if (!fs.existsSync(path)) {
              throw new Error('Approval file not found. Defaulting to no.');
            }

            const approval = fs.readFileSync(path, 'utf8').trim();
            if (approval !== 'yes') {
              throw new Error('Deployment not approved.');
            }

            const ref = 'main';
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            console.log(`Checking status for ref: ${ref}, owner: ${owner}, repo: ${repo}`);

            const checkRuns = await github.rest.checks.listForRef({
              owner,
              repo,
              ref,
              status: 'completed'
            });

            console.log(`Total check runs found: ${checkRuns.data.total_count}`);
            if (checkRuns.data.total_count === 0) {
              throw new Error('No check runs found for the specified ref.');
            }

            const checkRunNames = checkRuns.data.check_runs.map(check => check.name);
            console.log('Check run names found:', checkRunNames);

            const statusChecks = checkRuns.data.check_runs.filter(
              (check) => check.name === 'build-and-test-with-cache'
            );

            console.log(`Total status checks for "build-and-test-with-cache" found: ${statusChecks.length}`);
            if (statusChecks.length === 0) {
              throw new Error('Required status check "build-and-test-with-cache" not found.');
            }

            const statusCheck = statusChecks[0];

            console.log(`Status check conclusion: ${statusCheck.conclusion}`);
            if (statusCheck.conclusion !== 'success') {
              throw new Error(`Status check "build-and-test-with-cache" has not passed. Conclusion: ${statusCheck.conclusion}`);
            } else {
              console.log('Status check "build-and-test-with-cache" passed successfully.');
            }

      - name: Set up cache variables
        id: cache-vars
        run: |
          echo "Setting up cache variables..."
          echo "OS_VM=${{ runner.os }}-node-" >> $GITHUB_ENV
          echo "KEY_CACHE=${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json', '**/vitest.config.ts', '**/vite.config.ts', '**/tsconfig.vitest.json', '**/tsconfig.node.json', '**/tsconfig.json', '**/tsconfig.app.json', '**/env.d.ts', '**/src/main.ts', '**/src/router/index.ts', '**/update-version.cjs') }}" >> $GITHUB_ENV
          echo "RESTORE_KEYS=${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json') }}" >> $GITHUB_ENV
          echo "Cache variables set."

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node Environment
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ env.KEY_CACHE }}
          restore-keys: |
            ${{ env.RESTORE_KEYS }}
            ${{ env.OS_VM }}
          upload-chunk-size: 262144

      - name: Install dependencies
        run: npm install

      - name: Audit and fix vulnerabilities
        run: npm audit fix

      - name: Run build
        run: npm run build
        
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.REPO_ACCESS_TOKEN }}
          publish_dir: ./dist
